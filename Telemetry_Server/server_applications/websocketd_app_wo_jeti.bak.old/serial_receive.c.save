/* www.chrisheydrick.com
     
   June 23 2012
   CanonicalArduinoRead write a byte to an Arduino, and then
   receives a serially transmitted string in response.
   The call/response Arduino sketch is here:
   https://gist.github.com/2980344
   Arduino sketch details at www.chrisheydrick.com
*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdint.h>
#include <fcntl.h>
#include <termios.h>
#include <errno.h>
#include <sys/ioctl.h>

#define DEBUG 0
  
int main(int argc, char *argv[])
{
  int fd, n, i;
  char buf[1024] = "temp text";
  char rec_buf[1];
  struct termios toptions;
  size_t bytes_read;


  setbuf(stdout, NULL);

  /* open serial port */
  fd = open("/dev/ttyUSB0", O_RDWR | O_NOCTTY);
  printf("fd opened as %i\n", fd);  
  /* wait for the Arduino to reboot */
//  usleep(3500000);
  
  /* get current serial port settings */
  tcgetattr(fd, &toptions);
  /* set 9600 baud both ways */
  cfsetispeed(&toptions, B115200);
  cfsetospeed(&toptions, B115200);
  /* 8 bits, no parity, no stop bits */
  toptions.c_cflag &= ~PARENB;
  toptions.c_cflag &= ~CSTOPB;
  toptions.c_cflag &= ~CSIZE;
  toptions.c_cflag |= CS8;
  /* Canonical mode */
  toptions.c_lflag |= ICANON;
  /* commit the serial port settings */
  tcsetattr(fd, TCSANOW, &toptions);


while(1){
  /* Send byte to trigger Arduino to send string back */
  //  write(fd, "0", 1);
  /* Receive string from Arduino */
  

//  bytes_read = read( STDIN_FILENO, rec_buf, 1);
//  if(bytes_read >= 0){
//    rec_buf[ bytes_read ] = '\0';
  

//  scanf("%c", &rec_buf);
//  if (scanf("%c", &rec_buf) == 0)
//  {}

    if(getchar()/*rec_buf*/ == 0x67200a){

      write(fd, &rec_buf, 1);
      //usleep(10000);
      n = read(fd, buf, 1024);
      /* insert terminating zero in the string */
      buf[n] = 0;
      //  printf("%i bytes read, buffer contains: %s\n", n, buf);
      printf("%s\n",buf);

    }
//  }

  if(DEBUG)
    {
      printf("Printing individual characters in buf as integers...\n\n");
      for(i=0; i<n; i++)
	{
	  printf("Byte %i:%i, ",i+1, (int)buf[i]);
	}
      printf("\n");
    }
}
  return 0;
}
